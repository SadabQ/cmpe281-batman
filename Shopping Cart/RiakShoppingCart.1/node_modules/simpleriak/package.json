{
  "_args": [
    [
      {
        "raw": "simpleriak",
        "scope": null,
        "escapedName": "simpleriak",
        "name": "simpleriak",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/utsav/Desktop/RiakShoppingCart"
    ]
  ],
  "_from": "simpleriak@latest",
  "_id": "simpleriak@0.1.10",
  "_inCache": true,
  "_location": "/simpleriak",
  "_npmUser": {
    "name": "nathan-lafreniere",
    "email": "quitlahok@gmail.com"
  },
  "_npmVersion": "1.2.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "simpleriak",
    "scope": null,
    "escapedName": "simpleriak",
    "name": "simpleriak",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/simpleriak/-/simpleriak-0.1.10.tgz",
  "_shasum": "b4db3fe24dc5d247c2932ca8d865b82a2b777a5f",
  "_shrinkwrap": null,
  "_spec": "simpleriak",
  "_where": "/home/utsav/Desktop/RiakShoppingCart",
  "author": {
    "name": "Nathan LaFreniere",
    "email": "quitlahok@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/nlf/node-simpleriak/issues",
    "email": "quitlahok@gmail.com"
  },
  "dependencies": {
    "async": "~0.1.22",
    "request": "~2.11.1"
  },
  "description": "a very simple riak http client",
  "devDependencies": {
    "mocha": "~1.4.2",
    "precommit-hook": "~0.1.0",
    "should": "~1.1.0"
  },
  "directories": {},
  "dist": {
    "shasum": "b4db3fe24dc5d247c2932ca8d865b82a2b777a5f",
    "tarball": "https://registry.npmjs.org/simpleriak/-/simpleriak-0.1.10.tgz"
  },
  "homepage": "https://github.com/nlf/node-simpleriak",
  "keywords": [
    "riak"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "nathan-lafreniere",
      "email": "quitlahok@gmail.com"
    }
  ],
  "name": "simpleriak",
  "optionalDependencies": {},
  "readme": "SimpleRiak is a very simple riak HTTP client. It wraps request and simplifies the calls made to riak as much as possible.\n\nUsage\n=====\n\nWARNING\n-------\n\nThere is a breaking change in SimpleRiak 0.1.0. When doing getKeys, get, or mapred with multiple indexes, they are no longer specified in an array. Use an object with multiple keys instead.\n\nInstallation\n------------\n\n```\nnpm install simpleriak\n```\n\nObject creation\n---------------\n\nHost, port, and bucket are all optional. Host defaults to localhost and port to 8098.\nIf bucket is present, it sets the default bucket to be used in future calls. If you don't set the\nbucket here, you must specify it in each call you make. Specifying a bucket in a call always takes\nprecedence over the default.\n\n```javascript\nvar riak = require('simpleriak').createClient({ host: 'localhost', port: 8098, bucket: 'test' });\n```\n\nCallbacks\n---------\n\nEvery function returns the same callback pattern (err, reply).\n\nerr will be an Error object if any error is present\nreply is an object containing the following keys\n* \"statusCode\" will be the HTTP status code returned from riak\n* \"data\" will be the body of the HTTP response from riak\n* \"headers\" is the complete HTTP headers returned from riak\n* \"key\" when a location header is present, this property will contain the key in the header\n\nList buckets\n------------\n\n```javascript\nriak.getBuckets(function (err, reply) {\n    console.log(reply.data);\n});\n```\n\nList keys\n---------\n\n```javascript\nriak.getKeys({ bucket: 'test2' }, function (err, reply) {\n    console.log(reply.data);\n});\n```\n\nList keys (matching an index)\n-----------------------------\n\n```javascript\nriak.getKeys({ index: { count: { start: 5, end: 10 } } }, function (err, reply) {\n    console.log(reply.data);\n});\n```\n\nWhen using an index, you may either specify a start and end to be used with riak's range finding, or\na key which will search for an exact match.\n\nList keys (matching a search)\n-----------------------------\n\n```javascript\nriak.getKeys({ search: 'creator:me' }, function (err, reply) {\n    console.log(reply.data);\n});\n\nriak.getKeys({ search: { query: 'creator:me AND type:article', rows: 5, sort: 'timestamp' } }, function (err, reply) {\n    console.log(reply.data);\n});\n```\n\nSearching supports all query parameters supported by the Riak Solr interface.\n\n\nList indexes (matching a key)\n-----------------------------\n\n```javascript\nriak.getIndexes({ key: 'test' }, function (err, reply) {\n    console.log(reply.data);\n});\n```\n\nThis is a utility function to retrieve and parse the indexes associated with a key. It can be useful, for\ninstance if you store permissions in an index and need to check it before acting on the key.\n\nGet bucket properties\n---------------------\n\n```javascript\nriak.getBucket(function (err, reply) {\n    console.log(reply.data); // gets default bucket properties\n});\n```\n\nSet bucket properties\n---------------------\n\n```javascript\nriak.setBucket({ allow_mult: false }, function (err, reply) {\n    console.log(err); // reply.data should be empty for this call\n});\n```\n\nYou can specify any editable property for a bucket.\n\nGet data (by key)\n-----------------\n\n```javascript\nriak.get({ key: 'test' }, function (err, reply) {\n    console.log(reply.data); // returns { example: 'object' }\n});\n```\n\nGet data (by index)\n-------------------\n\n```javascript\nriak.get({ index: { creator: 'me' } }, function (err, reply) {\n    console.log(reply.data); // returns ['i put this here']\n});\n```\n\nWhen fetching data by index, the reply data will always be an array. This usage is actually an interface to the MapReduce\nfunction (described later) that fetches the keys and uses the Riak.mapValuesJson map phase to return data. Note that you can\nspecify multiple indexes.\n\n```javascript\nriak.get({ index: { creator: 'me', published: true } }, function (err, reply) {\n    console.log(reply.data);\n});\n```\n\nGet data (by search)\n--------------------\n\n```javascript\nriak.get({ search: 'creator:me' }, function (err, reply) {\n    console.log(reply.data);\n});\n```\n\n\nStore data (Riak created key)\n-----------------------------\n\n```javascript\nriak.put({ data: 'wee, a string!' }, function (err, reply) {\n    console.log(reply.key); // the key riak created\n});\n```\n\n\nStore data (User specified key)\n-------------------------------\n\n```javascript\nriak.put({ key: 'test', data: { example: 'object' } }, function (err, reply) {\n    console.log(err);\n});\n```\n\nStore data (with an index)\n--------------------------\n\n```javascript\nriak.put({ index: { creator: 'me' }, data: 'i put this here' }, function (err, reply) {\n    console.log(reply.key);\n});\n```\n\nYou can specify as many indexes as you like, the property name will be the index and its value the key.\n\nDelete a key\n------------\n\n```javascript\nriak.del({ key: 'creator' }, function (err, reply) {\n    console.log(err);\n});\n```\n\nNote that this function does not work with an index, this is by design. If you need to delete all keys\nthat match an index, use getKeys and iterate the results.\n\nModify a key's contents\n-----------------------\n\nSimpleRiak includes a simple modify function that performs a GET request, alters the response, then saves it\nback to the correct key.\n\n```javascript\nfunction transform(data) {\n    return data + ' is now changed!';\n}\n\nriak.modify({ key: 'test', transform: transform }, function (err, reply) {\n    console.log(err);\n});\n```\n\nNote that this function only works by key. The index property here is used to modify the indexes stored for the\nspecific key. To remove an index completely, set its value to undefined.\n\n```javascript\nriak.modify({ key: 'test', index: { new_index: 'this is new', old_index: undefined } }, function (err, reply) {\n    console.log(err); //the key test will now have the index \"old_index\" removed, and the index \"new_index\" added with a value of \"this is new\"\n});\n```\n\nMapReduce\n---------\n\n```javascript\nfunction map(v, keyData, arg) {\n    var ret = [],\n        index = v.values[0].metadata.index;\n\n    if (index.creator_bin === arg) ret.push(JSON.parse(v.values[0].data));\n    return ret;\n};\n\nriak.mapred({ map: { source: map, arg: 'me' } }, function (err, reply) {\n    console.log(reply.data); // ['i put this here']\n});\n```\n\nThe MapReduce function can take map and reduce phases as either an object (shown above), a string\n\n```javascript\nriak.mapred({ map: 'Riak.mapValuesJson' }, callback);\n```\n\nor a function directly\n\n```javascript\nriak.mapred({ map: map }, callback);\n```\n\nYou may specify a bucket, a bucket and key, an array of keys, or a bucket and an index using an exact match or range.\nIndexes and search inputs are run through getKeys and the resulting array passed to mapreduce, so this input also\nsupports matching on multiple indexes and full search query parameters.\n\n```javascript\nriak.mapred({ bucket: 'test2', map: 'Riak.mapValuesJson' }, callback);\nriak.mapred({ key: 'test', map: 'Riak.mapValuesJson' }, callback); // default bucket is used\nriak.mapred({ key: ['test', 'test2'], map: 'Riak.mapValuesJson' }, callback);\nriak.mapred({ index: { creator: 'me' }, map: 'Riak.mapValuesJson' }, callback);\nriak.mapred({ search: 'creator:me' }, callback);\n```\n\nSearch\n------\n\n```javascript\nriak.search({ query: 'creator:me', rows: 10 }, function (err, reply) {\n    console.log(reply.data);\n});\n```\n\nAll parameters allowed by the Solr interface are allowed here and are passed directly through. The response\nwill come back in the same format as MapReduce. The numFound, start, and params data normally returned by Solr\ncan be found in the headers property of the reply.\n\nPing\n----\n\n```javascript\nriak.ping(function (err, reply) {\n    console.log(reply.data); // 'OK'\n});\n```\n\nStats\n-----\n\n```javascript\nriak.stats(function (err, reply) {\n    console.log(reply.data); // full stats object returned from riak\n});\n```\n\nResources\n---------\n\n```javascript\nriak.resources(function (err, reply) {\n    console.log(reply.data); // full resources information from riak\n});\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/nlf/node-simpleriak.git"
  },
  "scripts": {
    "test": "node test"
  },
  "version": "0.1.10"
}
